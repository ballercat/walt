// WAVE EQUATION - Click and drag on the canvas.
// Hold down a key to animate with the JavaScript version.
// Compare this to the version generated by Emscripten: https://webassembly.studio/?f=kv3dhnahf1

import {
  getCanvasWidth: GetSizeType,
  getCanvasHeight: GetSizeType,
  log: LogType
} from 'env';

type LogType = (i32) => void;
type GetSizeType = () => i32;

export const memory: Memory<{initial: 1}>;

const HEAP_START: i32 = 65536;

function applyCap(x: i32) : i32 {
  if (x < -0x40000000) {
    return -0x40000000;
  }
  if (x > 0x3FFFFFFF) {
    return 0x3FFFFFFF;
  }
  return x;
}

function toRGB(x: i32) : i32 {
  const val: i32 = x >> 22;
  if (val < 0) {
    return ((-(val + 1)) | 0xFF000000); //red
  }
  return (((val << 8) | (val << 16)) | 0xFF000000); // cyan
}

export function step(): void {

  const width: i32 = getCanvasWidth();
  const height: i32 = getCanvasHeight();
  const wh: i32 = width * height;

  const image: i32[] = HEAP_START;
  const force: i32[] = HEAP_START + 4 * wh;
  const status: i32[] = HEAP_START + 8 * wh;
  const u: i32[] = HEAP_START + 12 * wh;
  const vel: i32[] = HEAP_START + 16 * wh;

  // Draw walls
  let i: i32 = 0;
  for (i = 0; i < height; i += 1) {
    status[i * width] = 1;
    status[i * width + width - 1] = 1;
  }
  for (i = 0; i < width; i += 1) {
    status[i] = 1;
    status[width * height - width + i] = 1;
  }

  // Calculate velocity change
  for (i = 0; i < wh; i += 1) {
    if (status[i] == 0) {
      const uCen: i32 = u[i];
      const uNorth: i32 = u[i - width];
      const uSouth: i32 = u[i + width];
      const uEast: i32 = u[i + 1];
      const uWest: i32 = u[i - 1];
      const uxx: i32 = (((uWest + uEast) >> 1) - uCen);
      const uyy: i32 = (((uNorth + uSouth) >> 1) - uCen);
      vel[i] = applyCap(vel[i] + (uxx >> 1) + (uyy >> 1));
    }
  }

  // Apply forces
  for (i = 0; i < wh; i += 1) {
    if (status[i] == 0) {
      const f: i32 = force[i];
      u[i] = applyCap(f + applyCap(u[i] + vel[i]));
      force[i] = f >> 1;
    }
  }

  // Generate image
  for (i = 0; i < wh; i += 1) {
    if (status[i] == 1) {
      image[i] = 0xFFFF0000;
    } else {
      image[i] = toRGB(u[i]);
    }
  }
}
