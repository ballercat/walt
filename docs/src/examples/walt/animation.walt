import {
  setFillColor: FillType,
  fillRect: FillType,
  getCanvasWidth: GetSizeTye,
  getCanvasHeight: GetSizeType,
  log: LogType
} from 'env';
type FillType = (i32, i32, i32, i32) => void;
type LogType = (i32) => void;
type ParticleType = {
  'x': f32,
  'y': f32,
  'vx': f32,
  'vy': f32
};

const memory: Memory = { 'initial': 1 };
const particleByteSize: i32 = 16;

let total: i32 = 0;
let width: i32 = 0;
let height: i32 = 0;
export function onInit(totalParticles: i32): void {
  width = 500;
  height = 400;
  total = totalParticles;

  let particle: ParticleType = 0;
  let i: i32 = 0;

  for (i = 0; i < total; i += 1) {
    particle = i * particleByteSize;
    particle['x'] = width / 2.0;
    particle['y'] = height / 2.0;
    particle['vx'] = ((i * 7 % 200) - 100) / 100.0;
    particle['vy'] = ((i * 19 % 200) - 100) / 100.0;
  }
}

function bounce(particlePtr: i32, min: f32): void {
  const particle: ParticleType = particlePtr;
  const maxHeight: f32 = height - min;
  const maxWidth: f32 = width - min;

  if (particle['y'] > maxHeight) {
    particle['y'] -= particle['y'] - maxHeight;
    particle['vy'] = 0.0 - particle['vy'];
  } else {
    if (particle['y'] < min) {
      particle['y'] = 0 - particle['y'];
      particle['vy'] = 0 - particle['vy'];
    }
  }

  if (particle['x'] > maxWidth) {
    particle['x'] -= particle['x'] - maxWidth;
    particle['vx'] = 0.0 - particle['vx'];
  } else {
    if (particle['x'] < min) {
      particle['x'] = 0.0 - particle['x'];
      particle['vx'] = 0.0 - particle['vx'];
    }
  }
}

let previous: i32 = 0;
export function onAnimationFrame(timestamp: i32): void {
  const delta: i32 = previous ? timestamp - previous : 0;
  previous = timestamp;

  setFillColor(64, 64, 64, 255);
  fillRect(0, 0, width, height);

  let particle: ParticleType = 0;

  setFillColor(255, 0, 0, 255);

  let i: i32 = 0;
  for (i = 0; i < total; i += 1) {
    particle = i * particleByteSize;
    particle['vy'] += 0.001 * delta;
    particle['vx'] += 0.001 * delta;
    particle['x'] += particle['vx'] * delta;
    particle['y'] += particle['vy'] * delta;

    bounce(particle, 10.0);

    fillRect((particle['x'] + 0.5) : i32, (particle['y'] + 0.5): i32, 10, 10);
  }
}


